#include <iostream>
#include <vector>
#include <string>
using namespace std;

struct Task {
    string description;
    bool completed;
};

vector<Task> tasks;

void addTask(const string& description) {
    tasks.push_back(Task{description, false});
    cout << "Task added successfully!"<<endl<<endl;
}

void viewTasks() {
    if (tasks.empty()) {
        cout << "No tasks to display.\nPlease add tasks first!!" <<endl <<endl;
        return;
    }

    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". " << tasks[i].description;
        if (tasks[i].completed) {
            cout << " - Completed";
        }
        cout << "\n";
    }
}

void markTaskAsCompleted(size_t taskIndex) {
    if (taskIndex <= 0 || taskIndex > tasks.size()) {
        cout << "Invalid task index.\n"<<endl;
        return;
    }

    tasks[taskIndex - 1].completed = true;
    cout << "Task marked as completed successfully!\n"<<endl;
}

void removeTask(size_t taskIndex) {
    if (taskIndex <= 0 || taskIndex > tasks.size()) {
        cout << "Invalid task index.\n"<<endl;
        return;
    }

    tasks.erase(tasks.begin() + taskIndex - 1);
    cout << "Task removed successfully!\n";
}

int main() {
    int choice;

    while (true) {
    	cout<<"___________________________"<<endl<<endl;
        cout << "1. Add Task\n2. View Tasks\n3. Mark Task as Completed\n4. Remove Task\n5. Exit\n"<<endl;
        cout << "Enter your choice: ";
        cin >> choice;


        string description;
        size_t taskIndex;

        switch (choice) {
            case 1:
                cout << "Enter task description: ";
                cin.ignore();
                getline(cin, description);
                addTask(description);
                break;
            case 2:
                viewTasks();
                break;
            case 3:
                cout << "Enter task index: ";
                cin >> taskIndex;
                markTaskAsCompleted(taskIndex);
                break;
            case 4:
                cout << "Enter task index: ";
                cin >> taskIndex;
                removeTask(taskIndex);
                break;
            case 5:
                return 0;
            default:
                cout << "Invalid choice! Please try again.\n"<<endl;
        }
    }

    return 0;
}
